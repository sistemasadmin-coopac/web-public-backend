name: 🚀 Deploy to Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: coopac-elsalvador-backend
  PROJECT_NUMBER: 312882262715
  GAR_LOCATION: southamerica-west1
  GAR_NAME: containers
  IMAGE_NAME: web-public-backend
  SERVICE: web-public-backend-prod
  REGION: southamerica-west1
  SPRING_PROFILES_ACTIVE: prod
  GCS_PROJECT_ID: coopac-elsalvador-backend
  CLOUD_SQL_INSTANCE: coopac-elsalvador-backend:us-central1:coopac-elsalvador-web-public-db

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔨 BUILD APPLICATION
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest

    outputs:
      short-sha: ${{ steps.shortsha.outputs.sha }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🏷️ Generate short SHA
        id: shortsha
        run: echo "sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: 🔨 Build with Gradle
        run: ./gradlew clean build -x test

      - name: 📊 Display build info
        run: |
          echo "✅ Build completed successfully"
          echo "📦 Artifact: cac-elsavaldor-backend-1.0.0.jar"
          echo "🏷️ Short SHA: ${{ steps.shortsha.outputs.sha }}"
          ls -lh build/libs/*.jar

      - name: 📦 Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar
          retention-days: 1

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🐳 BUILD & PUSH DOCKER IMAGE
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-runner@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: 🏗️ Build Docker image
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "🏗️ Building image: $IMAGE"
          docker build -t "$IMAGE" .
          echo "✅ Image built successfully"

      - name: 📤 Push to Artifact Registry
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "📤 Pushing image: $IMAGE"
          docker push "$IMAGE"
          echo "✅ Image pushed to registry"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🚀 DEPLOY TO CLOUD RUN
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build, docker]

    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-runner@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          service: ${{ env.SERVICE }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}
          env_vars: |
            SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }}
            GCS_PROJECT_ID=${{ env.GCS_PROJECT_ID }}
            DB_URL=jdbc:postgresql:///web-public-coopac-db?cloudSqlInstance=${{ env.CLOUD_SQL_INSTANCE }}&socketFactory=com.google.cloud.sql.postgres.SocketFactory
          secrets: |
            DB_USERNAME=DB_USERNAME:latest
            DB_PASSWORD=DB_PASSWORD:latest
            GCS_BUCKET_NAME=GCS_BUCKET_NAME:latest
          flags: |
            --memory=2Gi
            --cpu=2
            --concurrency=80
            --execution-environment=gen2
            --timeout=300
            --min-instances=0
            --max-instances=1
            --cpu-boost
            --port=8080
            --add-cloudsql-instances=${{ env.CLOUD_SQL_INSTANCE }}

      - name: ✅ Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployment completed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Service URL: ${{ steps.deploy.outputs.url }}"
          echo "📦 Image: ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "🏷️ Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "📝 Message: ${{ github.event.head_commit.message }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
