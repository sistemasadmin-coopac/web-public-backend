name: 🚀 Deploy to Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: coopac-elsalvador-backend
  PROJECT_NUMBER: 312882262715
  REGION: us-central1
  GAR_LOCATION: us-central1
  GAR_NAME: containers
  IMAGE_NAME: web-public-backend
  SERVICE: web-public-backend-prod
  SPRING_PROFILES_ACTIVE: prod
  GCS_PROJECT_ID: coopac-elsalvador-backend
  CLOUD_SQL_INSTANCE: coopac-elsalvador-backend:us-central1:coopac-elsalvador-web-public-db
  DB_NAME: web-public-coopac-db

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔨 BUILD
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.shortsha.outputs.sha }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🏷️ Generate short SHA
        id: shortsha
        run: echo "sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: 🔨 Build with Gradle
        run: ./gradlew clean build -x test

      - name: 📦 Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar
          retention-days: 1

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🐳 BUILD & PUSH IMAGE
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs/

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-runner@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: 🐳 Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: 🏗️ Build Docker Image
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "🏗️ Building: $IMAGE"
          docker build -t "$IMAGE" .

      - name: 📤 Push Docker Image
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "📤 Pushing: $IMAGE"
          docker push "$IMAGE"
          echo "✅ Image pushed successfully"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🚀 DEPLOY
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build, docker]
    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-runner@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 📋 Prepare deployment
        run: |
          echo "🎯 Deploying to Cloud Run..."
          echo "   Service: ${{ env.SERVICE }}"
          echo "   Region: ${{ env.REGION }}"
          echo "   Image: ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"

      - name: 🚀 Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --timeout=300 \
            --concurrency=120 \
            --min-instances=0 \
            --max-instances=1 \
            --execution-environment=gen2 \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_INSTANCE }} \
            --set-env-vars="SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }},GCS_PROJECT_ID=${{ env.GCS_PROJECT_ID }},CLOUD_SQL_INSTANCE=${{ env.CLOUD_SQL_INSTANCE }},DB_NAME=${{ env.DB_NAME }},JAVA_TOOL_OPTIONS=-Xmx768m -XX:+UseZGC" \
            --update-secrets="DATABASE_URL=DATABASE_URL:latest,DB_USERNAME=DB_USERNAME:latest,DB_PASSWORD=DB_PASSWORD:latest,GCS_BUCKET_NAME=GCS_BUCKET_NAME:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:latest" \
            --quiet

      - name: 🔓 Set IAM Policy (Allow Public Access)
        run: |
          gcloud run services add-iam-policy-binding ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --quiet || echo "⚠️ IAM policy already set"

      - name: 🌐 Get Service URL
        id: url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "url=$SERVICE_URL" >> "$GITHUB_OUTPUT"
          echo "🌐 Service URL: $SERVICE_URL"

      - name: ✅ Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployment completed successfully!"
          echo "🌐 URL: ${{ steps.url.outputs.url }}"
          echo "📦 Image: ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.short-sha }}"
          echo "🏷️  Commit: ${{ github.sha }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
